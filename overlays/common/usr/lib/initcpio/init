#!/usr/bin/ash

udevd_running=0
mount_handler=default_mount_handler
init=/sbin/init
rd_logmask=0

. /init_functions

mount_setup

# parse the kernel command line
parse_cmdline </proc/cmdline

# setup logging as early as possible
rdlogger_start

for d in ${disablehooks//,/ }; do
    [ -e "/hooks/$d" ] && chmod 644 "/hooks/$d"
done

. /config

run_hookfunctions 'run_earlyhook' 'early hook' $EARLYHOOKS

if [ -n "$earlymodules$MODULES" ]; then
    modprobe -qab ${earlymodules//,/ } $MODULES
fi

run_hookfunctions 'run_hook' 'hook' $HOOKS

# honor the old behavior of break=y as a synonym for break=premount
if [ "${break}" = "y" ] || [ "${break}" = "premount" ]; then
    echo ":: Pre-mount break requested, type 'exit' to resume operation"
    launch_interactive_shell
fi

rootdev=$(resolve_device "$root") && root=$rootdev
unset rootdev

###############
## RetroRoot ##
###############

#fsck_root

# Mount root at /new_root
#"$mount_handler" /new_root

# mount boot
mkdir /boot_root
mount -L RR-BOOT -o ro,defaults /boot_root || launch_interactive_shell

# retroroot rootfs overlay - TODO: use 'late hook' ?
mkdir /overlay_data || launch_interactive_shell
# mount data partition
mount -L RR-DATA -o rw,defaults /overlay_data || launch_interactive_shell
# create directories
mkdir -p /overlay_data/lower_root /overlay_data/upper_root /overlay_data/work_root \
    /overlay_data/lower_home /overlay_data/upper_home /overlay_data/work_home \
    || launch_interactive_shell
# mount root overlay
mount -t squashfs /boot_root/rootfs.sqsh /overlay_data/lower_root -o loop
mount -t overlay overlay -o lowerdir=/overlay_data/lower_root,upperdir=/overlay_data/upper_root,workdir=/overlay_data/work_root /new_root || launch_interactive_shell
# mount "rr" home overlay
mount -t overlay overlay -o lowerdir=/overlay_data/lower_root/home/rr,upperdir=/overlay_data/upper_home,workdir=/overlay_data/work_home /new_root/home/rr || launch_interactive_shell

# move boot in place
mkdir -p /new_root/boot
mount --move /boot_root /new_root/boot || launch_interactive_shell

###############
## RetroRoot ##
###############

run_hookfunctions 'run_latehook' 'late hook' $LATEHOOKS
run_hookfunctions 'run_cleanuphook' 'cleanup hook' $CLEANUPHOOKS

if [ "$(stat -c %D /)" = "$(stat -c %D /new_root)" ]; then
    # Nothing got mounted on /new_root. This is the end, we don't know what to do anymore
    # We fall back into a shell, but the shell has now PID 1
    # This way, manual recovery is still possible.
    err "Failed to mount the real root device."
    echo "Bailing out, you are on your own. Good luck."
    echo
    launch_interactive_shell --exec
elif [ ! -x "/new_root${init}" ]; then
    # Successfully mounted /new_root, but ${init} is missing
    # The same logic as above applies
    err "Root device mounted successfully, but ${init} does not exist."
    echo "Bailing out, you are on your own. Good luck."
    echo
    launch_interactive_shell --exec
fi

if [ "${break}" = "postmount" ]; then
    echo ":: Post-mount break requested, type 'exit' to resume operation"
    launch_interactive_shell
fi

# this should always be the last thing we do before the switch_root.
rdlogger_stop

exec env -i \
    "TERM=$TERM" \
    /usr/bin/switch_root /new_root $init "$@"

# vim: set ft=sh ts=4 sw=4 et:
