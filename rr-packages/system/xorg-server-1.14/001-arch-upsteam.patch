--- xorg-server-1.14.5/configure.ac	2013-12-13 04:42:12.000000000 +0100
+++ xorg-server-1.14.5-archupstream/configure.ac	2024-03-29 13:22:42.286908542 +0100
@@ -802,9 +802,9 @@ LIBAPPLEWM="applewm >= 1.4"
 LIBDMX="dmx >= 1.0.99.1"
 LIBDRI="dri >= 7.8.0"
 LIBDRM="libdrm >= 2.3.0"
-LIBGL="gl >= 7.1.0"
+LIBGL="gl >= 1.2"
 LIBXEXT="xext >= 1.0.99.4"
-LIBXFONT="xfont >= 1.4.2"
+LIBXFONT="xfont2 >= 1.4.2"
 LIBXI="xi >= 1.2.99.1"
 LIBXTST="xtst >= 1.0.99.2"
 LIBPCIACCESS="pciaccess >= 0.12.901"

--- xorg-server-1.14.5/dix/main.c	2013-07-26 07:19:03.000000000 +0200
+++ xorg-server-1.14.5-archupstream/dix/main.c	2024-03-29 17:02:04.358502703 +0100
@@ -81,6 +81,8 @@ Equipment Corporation.
 #include <X11/X.h>
 #include <X11/Xos.h>            /* for unistd.h  */
 #include <X11/Xproto.h>
+#include <X11/fonts/fontstruct.h>
+#include <X11/fonts/libxfont2.h>
 #include <pixman.h>
 #include "scrnintstr.h"
 #include "misc.h"
@@ -197,9 +199,9 @@ main(int argc, char *argv[], char *envp[
         InitAtoms();
         InitEvents();
         InitSelections();
-        InitGlyphCaching();
+        xfont2_init_glyph_caching();
         dixResetRegistry();
-        ResetFontPrivateIndex();
+        InitFonts();
         InitCallbackManager();
         InitOutput(&screenInfo, argc, argv);

--- xorg-server-1.14.5/include/dixfont.h	2013-07-26 07:14:33.000000000 +0200
+++ xorg-server-1.14.5-archupstream/include/dixfont.h	2024-03-29 15:34:45.370097715 +0100
@@ -116,6 +116,14 @@ extern _X_EXPORT void InitFonts(void);
 
 extern _X_EXPORT void FreeFonts(void);
 
+extern _X_EXPORT void GetGlyphs(FontPtr /*font */ ,
+                                unsigned long /*count */ ,
+                                unsigned char * /*chars */ ,
+                                FontEncoding /*fontEncoding */ ,
+                                unsigned long * /*glyphcount */ ,
+                                CharInfoPtr * /*glyphs */ );
+
+#if 0
 extern _X_EXPORT FontPtr find_old_font(XID /*id */ );
 
 #define GetGlyphs dixGetGlyphs
@@ -143,5 +151,6 @@ extern _X_EXPORT void InitGlyphCaching(v
 extern _X_EXPORT void SetGlyphCachingMode(int /*newmode */ );
 
 extern _X_EXPORT void register_fpe_functions(void);
+#endif
 
 #endif                          /* DIXFONT_H */

--- xorg-server-1.14.5/Xext/xf86bigfont.c	2013-07-26 07:14:32.000000000 +0200
+++ xorg-server-1.14.5-archupstream/Xext/xf86bigfont.c	2024-03-29 15:03:07.950509704 +0100
@@ -439,7 +439,7 @@ ProcXF86BigfontQueryFont(ClientPtr clien
 #ifdef HAS_SHM
             if (pDesc && !badSysCall) {
                 *(CARD32 *) (pCI + nCharInfos) = signature;
-                if (!FontSetPrivate(pFont, FontShmdescIndex, pDesc)) {
+                if (!xfont2_font_set_private(pFont, FontShmdescIndex, pDesc)) {
                     shmdealloc(pDesc);
                     return BadAlloc;
                 }
@@ -723,7 +723,7 @@ XFree86BigfontExtensionInit(void)
             + (unsigned int) (65536.0 / (RAND_MAX + 1.0) * rand());
         /* fprintf(stderr, "signature = 0x%08X\n", signature); */
 
-        FontShmdescIndex = AllocateFontPrivateIndex();
+        FontShmdescIndex = xfont2_allocate_font_private_index();
 
 #if !defined(CSRG_BASED) && !defined(__CYGWIN__)
         pagesize = SHMLBA;
[rr@retroroot src]$ diff -urpN xorg-server-1.14.5/dix/dispatch.c xorg-server-1.14.5-archupstream/dix/dispatch.c 
--- xorg-server-1.14.5/dix/dispatch.c	2013-07-26 07:19:03.000000000 +0200
+++ xorg-server-1.14.5-archupstream/dix/dispatch.c	2024-03-29 15:05:04.496536831 +0100
@@ -108,6 +108,7 @@ int ProcInitialConnection();
 
 #include "windowstr.h"
 #include <X11/fonts/fontstruct.h>
+#include <X11/fonts/libxfont2.h>
 #include "dixfontstr.h"
 #include "gcstruct.h"
 #include "selection.h"
@@ -1287,7 +1288,7 @@ ProcQueryTextExtents(ClientPtr client)
             return BadLength;
         length--;
     }
-    if (!QueryTextExtents(pFont, length, (unsigned char *) &stuff[1], &info))
+    if (!xfont2_query_text_extents(pFont, length, (unsigned char *) &stuff[1], &info))
         return BadAlloc;
     reply = (xQueryTextExtentsReply) {
         .type = X_Reply,

--- xorg-server-1.14.5/hw/dmx/dmxfont.c	2013-07-26 07:14:32.000000000 +0200
+++ xorg-server-1.14.5-archupstream/hw/dmx/dmxfont.c	2024-03-29 15:29:06.078626226 +0100
@@ -46,6 +46,7 @@
 #include "dmxlog.h"
 
 #include <X11/fonts/fontstruct.h>
+#include <X11/fonts/libxfont2.h>
 #include "dixfont.h"
 #include "dixstruct.h"
 
@@ -447,7 +448,7 @@ dmxRealizeFont(ScreenPtr pScreen, FontPt
     dmxFontPrivPtr pFontPriv;
 
     if (!(pFontPriv = FontGetPrivate(pFont, dmxFontPrivateIndex))) {
-        FontSetPrivate(pFont, dmxFontPrivateIndex, NULL);
+        xfont2_font_set_private(pFont, dmxFontPrivateIndex, NULL);
         pFontPriv = malloc(sizeof(dmxFontPrivRec));
         if (!pFontPriv)
             return FALSE;
@@ -460,7 +461,7 @@ dmxRealizeFont(ScreenPtr pScreen, FontPt
         pFontPriv->refcnt = 0;
     }
 
-    FontSetPrivate(pFont, dmxFontPrivateIndex, (pointer) pFontPriv);
+    xfont2_font_set_private(pFont, dmxFontPrivateIndex, (pointer) pFontPriv);
 
     if (dmxScreen->beDisplay) {
         if (!dmxBELoadFont(pScreen, pFont))
@@ -504,7 +505,7 @@ dmxUnrealizeFont(ScreenPtr pScreen, Font
         if (!pFontPriv->refcnt) {
             MAXSCREENSFREE(pFontPriv->font);
             free(pFontPriv);
-            FontSetPrivate(pFont, dmxFontPrivateIndex, NULL);
+            xfont2_font_set_private(pFont, dmxFontPrivateIndex, NULL);
         }
         else if (pFontPriv->font[pScreen->myNum]) {
             if (dmxScreen->beDisplay)
@@ -563,7 +564,7 @@ dmxUnrealizeFont(ScreenPtr pScreen, Font
                 ) {
                 MAXSCREENSFREE(pFontPriv->font);
                 free(pFontPriv);
-                FontSetPrivate(pFont, dmxFontPrivateIndex, NULL);
+                xfont2_font_set_private(pFont, dmxFontPrivateIndex, NULL);
             }
         }
     }

--- xorg-server-1.14.5/hw/dmx/dmxscrinit.c	2013-07-26 07:14:32.000000000 +0200
+++ xorg-server-1.14.5-archupstream/hw/dmx/dmxscrinit.c	2024-03-29 15:30:15.441578934 +0100
@@ -39,6 +39,8 @@
 #include <dmx-config.h>
 #endif
 
+#include <X11/fonts/libxfont2.h>
+
 #include "dmx.h"
 #include "dmxsync.h"
 #include "dmxshadow.h"
@@ -208,7 +210,7 @@ dmxScreenInit(ScreenPtr pScreen, int arg
 
     if (dmxGeneration != serverGeneration) {
         /* Allocate font private index */
-        dmxFontPrivateIndex = AllocateFontPrivateIndex();
+        dmxFontPrivateIndex = xfont2_allocate_font_private_index();
         if (dmxFontPrivateIndex == -1)
             return FALSE;

--- xorg-server-1.14.5/hw/xfree86/sdksyms.sh	2013-07-26 07:14:33.000000000 +0200
+++ xorg-server-1.14.5-archupstream/hw/xfree86/sdksyms.sh	2024-03-29 15:31:02.664653133 +0100
@@ -259,7 +259,6 @@ cat > sdksyms.c << EOF
 #include "dixevents.h"
 #include "dixfont.h"
 #include "dixfontstr.h"
-#include "dixfontstubs.h"
 #include "dixgrabs.h"
 #include "dixstruct.h"
 #include "exevents.h"
@@ -348,13 +347,25 @@ BEGIN {
     if (sdk) {
 	n = 3;
 
+  # skip line numbers GCC 5 adds before __attribute__
+  while ($n == "" || $0 ~ /^# [0-9]+ "/) {
+    getline;
+    n = 1;
+  }
+
 	# skip attribute, if any
 	while ($n ~ /^(__attribute__|__global)/ ||
 	    # skip modifiers, if any
 	    $n ~ /^\*?(unsigned|const|volatile|struct|_X_EXPORT)$/ ||
 	    # skip pointer
-	    $n ~ /^[a-zA-Z0-9_]*\*$/)
-	    n++;
+	    $n ~ /^[a-zA-Z0-9_]*\*$/) {
+	      n++;
+	      # skip line numbers GCC 5 adds after __attribute__
+	      while ($n == "" || $0 ~ /^# [0-9]+ "/) {
+          getline;
+          n = 1;
+        }
+      }
 
 	# type specifier may not be set, as in
 	#   extern _X_EXPORT unsigned name(...)

--- xorg-server-1.14.5/hw/xnest/Font.c	2013-07-26 07:14:33.000000000 +0200
+++ xorg-server-1.14.5-archupstream/hw/xnest/Font.c	2024-03-29 15:32:16.900912432 +0100
@@ -23,6 +23,7 @@ is" without express or implied warranty.
 #include "regionstr.h"
 #include <X11/fonts/font.h>
 #include <X11/fonts/fontstruct.h>
+#include "dixfontstr.h"
 #include "scrnintstr.h"
 
 #include "Xnest.h"
@@ -42,7 +43,7 @@ xnestRealizeFont(ScreenPtr pScreen, Font
     int i;
     const char *name;
 
-    FontSetPrivate(pFont, xnestFontPrivateIndex, NULL);
+    xfont2_font_set_private(pFont, xnestFontPrivateIndex, NULL);
 
     name_atom = MakeAtom("FONT", 4, True);
     value_atom = 0L;
@@ -65,7 +66,7 @@ xnestRealizeFont(ScreenPtr pScreen, Font
         return False;
 
     priv = (pointer) malloc(sizeof(xnestPrivFont));
-    FontSetPrivate(pFont, xnestFontPrivateIndex, priv);
+    xfont2_font_set_private(pFont, xnestFontPrivateIndex, priv);
 
     xnestFontPriv(pFont)->font_struct = XLoadQueryFont(xnestDisplay, name);
 
@@ -82,7 +83,7 @@ xnestUnrealizeFont(ScreenPtr pScreen, Fo
         if (xnestFontStruct(pFont))
             XFreeFont(xnestDisplay, xnestFontStruct(pFont));
         free(xnestFontPriv(pFont));
-        FontSetPrivate(pFont, xnestFontPrivateIndex, NULL);
+        xfont2_font_set_private(pFont, xnestFontPrivateIndex, NULL);
     }
     return True;
 }

--- xorg-server-1.14.5/hw/xnest/Init.c	2013-07-26 07:14:33.000000000 +0200
+++ xorg-server-1.14.5-archupstream/hw/xnest/Init.c	2024-03-29 15:32:59.904009788 +0100
@@ -26,6 +26,7 @@ is" without express or implied warranty.
 #include "servermd.h"
 #include "mi.h"
 #include <X11/fonts/fontstruct.h>
+#include "dixfontstr.h"
 
 #include "Xnest.h"
 
@@ -72,7 +73,7 @@ InitOutput(ScreenInfo * screenInfo, int
                 break;
             }
 
-    xnestFontPrivateIndex = AllocateFontPrivateIndex();
+    xnestFontPrivateIndex = xfont2_allocate_font_private_index();
 
     if (!xnestNumScreens)
         xnestNumScreens = 1;

--- xorg-server-1.14.5/dix/dixfonts.c	2013-10-22 04:39:33.000000000 +0200
+++ xorg-server-1.14.5-archupstream/dix/dixfonts.c	2024-03-29 15:45:36.383191982 +0100
@@ -52,9 +52,12 @@ Equipment Corporation.
 #include <dix-config.h>
 #endif
 
+#include <stddef.h>
 #include <X11/X.h>
 #include <X11/Xmd.h>
 #include <X11/Xproto.h>
+#include <X11/fonts/fontstruct.h>
+#include <X11/fonts/libxfont2.h>
 #include "scrnintstr.h"
 #include "resource.h"
 #include "dixstruct.h"
@@ -75,7 +78,7 @@ extern FontPtr defaultFont;
 
 static FontPathElementPtr *font_path_elements = (FontPathElementPtr *) 0;
 static int num_fpes = 0;
-static FPEFunctions *fpe_functions = (FPEFunctions *) 0;
+static xfont2_fpe_funcs_rec const **fpe_functions;
 static int num_fpe_types = 0;
 
 static unsigned char *font_path_string;
@@ -83,7 +86,7 @@ static unsigned char *font_path_string;
 static int num_slept_fpes = 0;
 static int size_slept_fpes = 0;
 static FontPathElementPtr *slept_fpes = (FontPathElementPtr *) 0;
-static FontPatternCachePtr patternCache;
+static xfont2_pattern_cache_ptr patternCache;
 
 static int
 FontToXError(int err)
@@ -108,15 +111,15 @@ static int
 LoadGlyphs(ClientPtr client, FontPtr pfont, unsigned nchars, int item_size,
            unsigned char *data)
 {
-    if (fpe_functions[pfont->fpe->type].load_glyphs)
-        return (*fpe_functions[pfont->fpe->type].load_glyphs)
+    if (fpe_functions[pfont->fpe->type]->load_glyphs)
+        return (*fpe_functions[pfont->fpe->type]->load_glyphs)
             (client, pfont, 0, nchars, item_size, data);
     else
         return Successful;
 }
 
 void
-dixGetGlyphs(FontPtr font, unsigned long count, unsigned char *chars,
+GetGlyphs(FontPtr font, unsigned long count, unsigned char *chars,
              FontEncoding fontEncoding,
              unsigned long *glyphcount,    /* RETURN */
              CharInfoPtr *glyphs)          /* RETURN */
@@ -207,7 +210,7 @@ FontWakeup(pointer data, int count, poin
     /* wake up any fpe's that may be waiting for information */
     for (i = 0; i < num_slept_fpes; i++) {
         fpe = slept_fpes[i];
-        (void) (*fpe_functions[fpe->type].wakeup_fpe) (fpe, LastSelectMask);
+        (void) (*fpe_functions[fpe->type]->wakeup_fpe) (fpe);
     }
 }
 
@@ -223,7 +226,7 @@ FreeFPE(FontPathElementPtr fpe)
 {
     fpe->refcount--;
     if (fpe->refcount == 0) {
-        (*fpe_functions[fpe->type].free_fpe) (fpe);
+        (*fpe_functions[fpe->type]->free_fpe) (fpe);
         free(fpe->name);
         free(fpe);
     }
@@ -267,14 +270,14 @@ doOpenFont(ClientPtr client, OFclosurePt
     if (client->clientGone) {
         if (c->current_fpe < c->num_fpes) {
             fpe = c->fpe_list[c->current_fpe];
-            (*fpe_functions[fpe->type].client_died) ((pointer) client, fpe);
+            (*fpe_functions[fpe->type]->client_died) ((void *) client, fpe);
         }
         err = Successful;
         goto bail;
     }
     while (c->current_fpe < c->num_fpes) {
         fpe = c->fpe_list[c->current_fpe];
-        err = (*fpe_functions[fpe->type].open_font)
+        err = (*fpe_functions[fpe->type]->open_font)
             ((pointer) client, fpe, c->flags,
              c->fontname, c->fnamelen, FontFormat,
              BitmapFormatMaskByte |
@@ -355,7 +358,7 @@ doOpenFont(ClientPtr client, OFclosurePt
         goto bail;
     }
     if (patternCache && pfont != c->non_cachable_font)
-        CacheFontPattern(patternCache, c->origFontName, c->origFontNameLen,
+        xfont2_cache_font_pattern(patternCache, c->origFontName, c->origFontNameLen,
                          pfont);
  bail:
     if (err != Successful && c->client != serverClient) {
@@ -402,7 +405,7 @@ OpenFont(ClientPtr client, XID fid, Mask
          ** having to create another instance of a font that already exists.
          */
 
-        cached = FindCachedFontPattern(patternCache, pfontname, lenfname);
+        cached = xfont2_find_cached_font_pattern(patternCache, pfontname, lenfname);
         if (cached && cached->info.cachable) {
             if (!AddResource(fid, RT_FONT, (pointer) cached))
                 return BadAlloc;
@@ -464,7 +467,7 @@ CloseFont(pointer value, XID fid)
         return Success;
     if (--pfont->refcnt == 0) {
         if (patternCache)
-            RemoveCachedFontPattern(patternCache, pfont);
+            xfont2_remove_cached_font_pattern(patternCache, pfont);
         /*
          * since the last reference is gone, ask each screen to free any
          * storage it may have allocated locally for it.
@@ -480,7 +483,7 @@ CloseFont(pointer value, XID fid)
         XF86BigfontFreeFontShm(pfont);
 #endif
         fpe = pfont->fpe;
-        (*fpe_functions[fpe->type].close_font) (fpe, pfont);
+        (*fpe_functions[fpe->type]->close_font) (fpe, pfont);
         FreeFPE(fpe);
     }
     return Success;
@@ -571,7 +574,7 @@ doListFontsAndAliases(ClientPtr client,
     if (client->clientGone) {
         if (c->current.current_fpe < c->num_fpes) {
             fpe = c->fpe_list[c->current.current_fpe];
-            (*fpe_functions[fpe->type].client_died) ((pointer) client, fpe);
+            (*fpe_functions[fpe->type]->client_died) ((void *) client, fpe);
         }
         err = Successful;
         goto bail;
@@ -584,10 +587,10 @@ doListFontsAndAliases(ClientPtr client,
         fpe = c->fpe_list[c->current.current_fpe];
         err = Successful;
 
-        if (!fpe_functions[fpe->type].start_list_fonts_and_aliases) {
+        if (!fpe_functions[fpe->type]->start_list_fonts_and_aliases) {
             /* This FPE doesn't support/require list_fonts_and_aliases */
 
-            err = (*fpe_functions[fpe->type].list_fonts)
+            err = (*fpe_functions[fpe->type]->list_fonts)
                 ((pointer) c->client, fpe, c->current.pattern,
                  c->current.patlen, c->current.max_names - c->names->nnames,
                  c->names);
@@ -614,7 +617,7 @@ doListFontsAndAliases(ClientPtr client,
                the FPEs.  */
 
             if (!c->current.list_started) {
-                err = (*fpe_functions[fpe->type].start_list_fonts_and_aliases)
+                err = (*fpe_functions[fpe->type]->start_list_fonts_and_aliases)
                     ((pointer) c->client, fpe, c->current.pattern,
                      c->current.patlen, c->current.max_names - c->names->nnames,
                      &c->current.private);
@@ -634,7 +637,7 @@ doListFontsAndAliases(ClientPtr client,
                 char *tmpname;
 
                 name = 0;
-                err = (*fpe_functions[fpe->type].list_next_font_or_alias)
+                err = (*fpe_functions[fpe->type]->list_next_font_or_alias)
                     ((pointer) c->client, fpe, &name, &namelen, &tmpname,
                      &resolvedlen, c->current.private);
                 if (err == Suspended) {
@@ -657,11 +660,11 @@ doListFontsAndAliases(ClientPtr client,
             if (err == Successful) {
                 if (c->haveSaved) {
                     if (c->savedName)
-                        (void) AddFontNamesName(c->names, c->savedName,
+                        (void) xfont2_add_font_names_name(c->names, c->savedName,
                                                 c->savedNameLen);
                 }
                 else
-                    (void) AddFontNamesName(c->names, name, namelen);
+                    (void) xfont2_add_font_names_name(c->names, name, namelen);
             }
 
             /*
@@ -686,7 +689,7 @@ doListFontsAndAliases(ClientPtr client,
                     int tmpnamelen;
 
                     tmpname = 0;
-                    (void) (*fpe_functions[fpe->type].list_next_font_or_alias)
+                    (void) (*fpe_functions[fpe->type]->list_next_font_or_alias)
                         ((pointer) c->client, fpe, &tmpname, &tmpnamelen,
                          &tmpname, &tmpnamelen, c->current.private);
                     if (--aliascount <= 0) {
@@ -793,7 +796,7 @@ doListFontsAndAliases(ClientPtr client,
         FreeFPE(c->fpe_list[i]);
     free(c->fpe_list);
     free(c->savedName);
-    FreeFontNames(names);
+    xfont2_free_font_names(names);
     free(c);
     free(resolved);
     return TRUE;
@@ -826,7 +829,7 @@ ListFonts(ClientPtr client, unsigned cha
         free(c);
         return BadAlloc;
     }
-    c->names = MakeFontNamesRecord(max_names < 100 ? max_names : 100);
+    c->names = xfont2_make_font_names_record(max_names < 100 ? max_names : 100);
     if (!c->names) {
         free(c->fpe_list);
         free(c);
@@ -869,7 +872,7 @@ doListFontsWithInfo(ClientPtr client, LF
     if (client->clientGone) {
         if (c->current.current_fpe < c->num_fpes) {
             fpe = c->fpe_list[c->current.current_fpe];
-            (*fpe_functions[fpe->type].client_died) ((pointer) client, fpe);
+            (*fpe_functions[fpe->type]->client_died) ((void *) client, fpe);
         }
         err = Successful;
         goto bail;
@@ -881,7 +884,7 @@ doListFontsWithInfo(ClientPtr client, LF
         fpe = c->fpe_list[c->current.current_fpe];
         err = Successful;
         if (!c->current.list_started) {
-            err = (*fpe_functions[fpe->type].start_list_fonts_with_info)
+            err = (*fpe_functions[fpe->type]->start_list_fonts_with_info)
                 (client, fpe, c->current.pattern, c->current.patlen,
                  c->current.max_names, &c->current.private);
             if (err == Suspended) {
@@ -898,7 +901,7 @@ doListFontsWithInfo(ClientPtr client, LF
         if (err == Successful) {
             name = 0;
             pFontInfo = &fontInfo;
-            err = (*fpe_functions[fpe->type].list_next_font_with_info)
+            err = (*fpe_functions[fpe->type]->list_next_font_with_info)
                 (client, fpe, &name, &namelen, &pFontInfo,
                  &numFonts, c->current.private);
             if (err == Suspended) {
@@ -930,7 +933,7 @@ doListFontsWithInfo(ClientPtr client, LF
 
                 tmpname = 0;
                 tmpFontInfo = &fontInfo;
-                (void) (*fpe_functions[fpe->type].list_next_font_with_info)
+                (void) (*fpe_functions[fpe->type]->list_next_font_with_info)
                     (client, fpe, &tmpname, &tmpnamelen, &tmpFontInfo,
                      &numFonts, c->current.private);
                 if (--aliascount <= 0) {
@@ -1118,7 +1121,7 @@ doPolyText(ClientPtr client, PTclosurePt
 
     if (client->clientGone) {
         fpe = c->pGC->font->fpe;
-        (*fpe_functions[fpe->type].client_died) ((pointer) client, fpe);
+        (*fpe_functions[fpe->type]->client_died) ((void *) client, fpe);
 
         if (ClientIsAsleep(client)) {
             /* Client has died, but we cannot bail out right now.  We
@@ -1144,7 +1147,7 @@ doPolyText(ClientPtr client, PTclosurePt
                the FPE code to clean up after client and avoid further
                rendering while we clean up after ourself.  */
             fpe = c->pGC->font->fpe;
-            (*fpe_functions[fpe->type].client_died) ((pointer) client, fpe);
+            (*fpe_functions[fpe->type]->client_died) ((void *) client, fpe);
             c->pDraw = (DrawablePtr) 0;
         }
     }
@@ -1399,7 +1402,7 @@ doImageText(ClientPtr client, ITclosureP
 
     if (client->clientGone) {
         fpe = c->pGC->font->fpe;
-        (*fpe_functions[fpe->type].client_died) ((pointer) client, fpe);
+        (*fpe_functions[fpe->type]->client_died) ((void *) client, fpe);
         err = Success;
         goto bail;
     }
@@ -1413,7 +1416,7 @@ doImageText(ClientPtr client, ITclosureP
             /* Our drawable has disappeared.  Treat like client died... ask
                the FPE code to clean up after client. */
             fpe = c->pGC->font->fpe;
-            (*fpe_functions[fpe->type].client_died) ((pointer) client, fpe);
+            (*fpe_functions[fpe->type]->client_died) ((void *) client, fpe);
             err = Success;
             goto bail;
         }
@@ -1542,7 +1545,7 @@ DetermineFPEType(char *pathname)
     int i;
 
     for (i = 0; i < num_fpe_types; i++) {
-        if ((*fpe_functions[i].name_check) (pathname))
+        if ((*fpe_functions[i]->name_check) (pathname))
             return i;
     }
     return -1;
@@ -1603,8 +1606,8 @@ SetFontPathElements(int npaths, unsigned
         return BadAlloc;
     }
     for (i = 0; i < num_fpe_types; i++) {
-        if (fpe_functions[i].set_path_hook)
-            (*fpe_functions[i].set_path_hook) ();
+        if (fpe_functions[i]->set_path_hook)
+            (*fpe_functions[i]->set_path_hook) ();
     }
     for (i = 0; i < npaths; i++) {
         len = (unsigned int) (*cp++);
@@ -1623,7 +1626,7 @@ SetFontPathElements(int npaths, unsigned
              */
             fpe = find_existing_fpe(font_path_elements, num_fpes, cp, len);
             if (fpe) {
-                err = (*fpe_functions[fpe->type].reset_fpe) (fpe);
+                err = (*fpe_functions[fpe->type]->reset_fpe) (fpe);
                 if (err == Successful) {
                     UseFPE(fpe);        /* since it'll be decref'd later when freed
                                          * from the old list */
@@ -1653,7 +1656,7 @@ SetFontPathElements(int npaths, unsigned
                 if (fpe->type == -1)
                     err = BadValue;
                 else
-                    err = (*fpe_functions[fpe->type].init_fpe) (fpe);
+                    err = (*fpe_functions[fpe->type]->init_fpe) (fpe);
                 if (err != Successful) {
                     if (persist) {
                         ErrorF
@@ -1678,7 +1681,7 @@ SetFontPathElements(int npaths, unsigned
     FreeFontPath(font_path_elements, num_fpes, FALSE);
     font_path_elements = fplist;
     if (patternCache)
-        EmptyFontPatternCache(patternCache);
+        xfont2_empty_font_pattern_cache(patternCache);
     num_fpes = valid_paths;
 
     return Success;
@@ -1815,29 +1818,44 @@ DeleteClientFontStuff(ClientPtr client)
 
     for (i = 0; i < num_fpes; i++) {
         fpe = font_path_elements[i];
-        if (fpe_functions[fpe->type].client_died)
-            (*fpe_functions[fpe->type].client_died) ((pointer) client, fpe);
+        if (fpe_functions[fpe->type]->client_died)
+            (*fpe_functions[fpe->type]->client_died) ((void *) client, fpe);
     }
 }
 
-void
-InitFonts(void)
+static int
+register_fpe_funcs(const xfont2_fpe_funcs_rec *funcs)
 {
-    patternCache = MakeFontPatternCache();
+    xfont2_fpe_funcs_rec const **new = reallocarray(fpe_functions, num_fpe_types + 1, sizeof(xfont2_fpe_funcs_ptr));
+    if (!new)
+        return -1;
+    fpe_functions = new;
 
-    register_fpe_functions();
+    fpe_functions[num_fpe_types] = funcs;
+
+    return num_fpe_types++;
 }
 
-_X_EXPORT
-int
-GetDefaultPointSize(void)
+static unsigned long
+get_server_generation(void)
+{
+    return serverGeneration;
+}
+
+static void *
+get_server_client(void)
+{
+    return serverClient;
+}
+
+static int
+get_default_point_size(void)
 {
     return 120;
 }
 
-_X_EXPORT
-FontResolutionPtr
-GetClientResolutions(int *num)
+static FontResolutionPtr
+get_client_resolutions(int *num)
 {
     static struct _FontResolution res;
     ScreenPtr pScreen;
@@ -1862,63 +1880,11 @@ GetClientResolutions(int *num)
     return &res;
 }
 
-/*
- * returns the type index of the new fpe
- *
- * should be called (only once!) by each type of fpe when initialized
- */
-
-_X_EXPORT
-int
-RegisterFPEFunctions(NameCheckFunc name_func,
-                     InitFpeFunc init_func,
-                     FreeFpeFunc free_func,
-                     ResetFpeFunc reset_func,
-                     OpenFontFunc open_func,
-                     CloseFontFunc close_func,
-                     ListFontsFunc list_func,
-                     StartLfwiFunc start_lfwi_func,
-                     NextLfwiFunc next_lfwi_func,
-                     WakeupFpeFunc wakeup_func,
-                     ClientDiedFunc client_died,
-                     LoadGlyphsFunc load_glyphs,
-                     StartLaFunc start_list_alias_func,
-                     NextLaFunc next_list_alias_func, SetPathFunc set_path_func)
-{
-    FPEFunctions *new;
-
-    /* grow the list */
-    new = (FPEFunctions *) realloc(fpe_functions,
-                                   (num_fpe_types + 1) * sizeof(FPEFunctions));
-    if (!new)
-        return -1;
-    fpe_functions = new;
-
-    fpe_functions[num_fpe_types].name_check = name_func;
-    fpe_functions[num_fpe_types].open_font = open_func;
-    fpe_functions[num_fpe_types].close_font = close_func;
-    fpe_functions[num_fpe_types].wakeup_fpe = wakeup_func;
-    fpe_functions[num_fpe_types].list_fonts = list_func;
-    fpe_functions[num_fpe_types].start_list_fonts_with_info = start_lfwi_func;
-    fpe_functions[num_fpe_types].list_next_font_with_info = next_lfwi_func;
-    fpe_functions[num_fpe_types].init_fpe = init_func;
-    fpe_functions[num_fpe_types].free_fpe = free_func;
-    fpe_functions[num_fpe_types].reset_fpe = reset_func;
-    fpe_functions[num_fpe_types].client_died = client_died;
-    fpe_functions[num_fpe_types].load_glyphs = load_glyphs;
-    fpe_functions[num_fpe_types].start_list_fonts_and_aliases =
-        start_list_alias_func;
-    fpe_functions[num_fpe_types].list_next_font_or_alias = next_list_alias_func;
-    fpe_functions[num_fpe_types].set_path_hook = set_path_func;
-
-    return num_fpe_types++;
-}
-
 void
 FreeFonts(void)
 {
     if (patternCache) {
-        FreeFontPatternCache(patternCache);
+        xfont2_free_font_pattern_cache(patternCache);
         patternCache = 0;
     }
     FreeFontPath(font_path_elements, num_fpes, TRUE);
@@ -1926,12 +1892,12 @@ FreeFonts(void)
     num_fpes = 0;
     free(fpe_functions);
     num_fpe_types = 0;
-    fpe_functions = (FPEFunctions *) 0;
+    fpe_functions = NULL;
 }
 
 /* convenience functions for FS interface */
 
-FontPtr
+static FontPtr
 find_old_font(XID id)
 {
     pointer pFont;
@@ -1940,30 +1906,26 @@ find_old_font(XID id)
     return (FontPtr) pFont;
 }
 
-_X_EXPORT
-Font
-GetNewFontClientID(void)
+static Font
+get_new_font_client_id(void)
 {
     return FakeClientID(0);
 }
 
-_X_EXPORT
-int
-StoreFontClientFont(FontPtr pfont, Font id)
+static int
+store_font_Client_font(FontPtr pfont, Font id)
 {
     return AddResource(id, RT_NONE, (pointer) pfont);
 }
 
-_X_EXPORT
-void
-DeleteFontClientID(Font id)
+static void
+delete_font_client_id(Font id)
 {
     FreeResource(id, RT_NONE);
 }
 
-_X_EXPORT
-int
-client_auth_generation(ClientPtr client)
+static int
+_client_auth_generation(ClientPtr client)
 {
     return 0;
 }
@@ -1971,9 +1933,73 @@ client_auth_generation(ClientPtr client)
 static int fs_handlers_installed = 0;
 static unsigned int last_server_gen;
 
-_X_EXPORT
-int
-init_fs_handlers(FontPathElementPtr fpe, BlockHandlerProcPtr block_handler)
+static void
+fs_block_handler(void *blockData, OSTimePtr timeout, void *readmask)
+{
+    FontBlockHandlerProcPtr block_handler = blockData;
+
+    (*block_handler)(timeout);
+}
+
+struct fs_fd_entry {
+    struct xorg_list            entry;
+    int                         fd;
+    void                        *data;
+    FontFdHandlerProcPtr        handler;
+};
+
+static void
+fs_fd_handler(int fd, int ready, void *data)
+{
+    struct fs_fd_entry    *entry = data;
+
+    entry->handler(fd, entry->data);
+}
+
+static struct xorg_list fs_fd_list;
+
+static int
+add_fs_fd(int fd, FontFdHandlerProcPtr handler, void *data)
+{
+    struct fs_fd_entry  *entry = calloc(1, sizeof (struct fs_fd_entry));
+
+    if (!entry)
+        return FALSE;
+
+    entry->fd = fd;
+    entry->data = data;
+    entry->handler = handler;
+    if (!SetNotifyFd(fd, fs_fd_handler, X_NOTIFY_READ, entry)) {
+        free(entry);
+        return FALSE;
+    }
+    xorg_list_add(&entry->entry, &fs_fd_list);
+    return TRUE;
+}
+
+static void
+remove_fs_fd(int fd)
+{
+    struct fs_fd_entry  *entry, *temp;
+
+    xorg_list_for_each_entry_safe(entry, temp, &fs_fd_list, entry) {
+        if (entry->fd == fd) {
+            xorg_list_del(&entry->entry);
+            free(entry);
+            break;
+        }
+    }
+    RemoveNotifyFd(fd);
+}
+
+static void
+adjust_fs_wait_for_delay(void *wt, unsigned long newdelay)
+{
+    AdjustWaitForDelay(wt, newdelay);
+}
+
+static int
+_init_fs_handlers(FontPathElementPtr fpe, FontBlockHandlerProcPtr block_handler)
 {
     /* if server has reset, make sure the b&w handlers are reinstalled */
     if (last_server_gen < serverGeneration) {
@@ -1981,18 +2007,18 @@ init_fs_handlers(FontPathElementPtr fpe,
         fs_handlers_installed = 0;
     }
     if (fs_handlers_installed == 0) {
-        if (!RegisterBlockAndWakeupHandlers(block_handler,
-                                            FontWakeup, (pointer) 0))
+        if (!RegisterBlockAndWakeupHandlers(fs_block_handler,
+                                            FontWakeup, (void *) block_handler))
             return AllocError;
+        xorg_list_init(&fs_fd_list);
         fs_handlers_installed++;
     }
     QueueFontWakeup(fpe);
     return Successful;
 }
 
-_X_EXPORT
-void
-remove_fs_handlers(FontPathElementPtr fpe, BlockHandlerProcPtr block_handler,
+static void
+_remove_fs_handlers(FontPathElementPtr fpe, FontBlockHandlerProcPtr block_handler,
                    Bool all)
 {
     if (all) {
@@ -2004,3 +2030,41 @@ remove_fs_handlers(FontPathElementPtr fp
     }
     RemoveFontWakeup(fpe);
 }
+
+static const xfont2_client_funcs_rec xfont2_client_funcs = {
+    .version = XFONT2_CLIENT_FUNCS_VERSION,
+    .client_auth_generation = _client_auth_generation,
+    .client_signal = ClientSignal,
+    .delete_font_client_id = delete_font_client_id,
+    .verrorf = VErrorF,
+    .find_old_font = find_old_font,
+    .get_client_resolutions = get_client_resolutions,
+    .get_default_point_size = get_default_point_size,
+    .get_new_font_client_id = get_new_font_client_id,
+    .get_time_in_millis = GetTimeInMillis,
+    .init_fs_handlers = _init_fs_handlers,
+    .register_fpe_funcs = register_fpe_funcs,
+    .remove_fs_handlers = _remove_fs_handlers,
+    .get_server_client = get_server_client,
+    .set_font_authorizations = set_font_authorizations,
+    .store_font_client_font = store_font_Client_font,
+    .make_atom = MakeAtom,
+    .valid_atom = ValidAtom,
+    .name_for_atom = NameForAtom,
+    .get_server_generation = get_server_generation,
+    .add_fs_fd = add_fs_fd,
+    .remove_fs_fd = remove_fs_fd,
+    .adjust_fs_wait_for_delay = adjust_fs_wait_for_delay,
+};
+
+xfont2_pattern_cache_ptr fontPatternCache;
+
+void
+InitFonts(void)
+{
+    if (fontPatternCache)
+	xfont2_free_font_pattern_cache(fontPatternCache);
+    fontPatternCache = xfont2_make_font_pattern_cache();
+    xfont2_init(&xfont2_client_funcs);
+}
+

--- xorg-server-1.14.5/include/dixfontstr.h	2013-07-26 07:14:33.000000000 +0200
+++ xorg-server-1.14.5-archupstream/include/dixfontstr.h	2024-03-29 15:35:20.923235953 +0100
@@ -27,6 +27,7 @@ SOFTWARE.
 #include "servermd.h"
 #include "dixfont.h"
 #include <X11/fonts/fontstruct.h>
+#include <X11/fonts/libxfont2.h>
 #include "closure.h"
 #include <X11/Xproto.h>         /* for xQueryFontReply */

--- xorg-server-1.14.5/include/dixfontstubs.h	2013-07-26 07:14:33.000000000 +0200
+++ xorg-server-1.14.5-archupstream/include/dixfontstubs.h	2024-03-29 15:36:15.282937657 +0100
@@ -1,45 +0,0 @@
-#ifndef DIXFONTSTUBS_H
-#define DIXFONTSTUBS_H 1
-
-/*
- * libXfont stubs replacements
- * This header exists solely for the purpose of sdksyms generation;
- * source code should #include "dixfonts.h" instead, which pulls in these
- * declarations from <X11/fonts/fontproto.h>
- */
-extern _X_EXPORT int client_auth_generation(ClientPtr client);
-
-extern _X_EXPORT void DeleteFontClientID(Font id);
-
-extern _X_EXPORT FontResolutionPtr GetClientResolutions(int *num);
-
-extern _X_EXPORT int GetDefaultPointSize(void);
-
-extern _X_EXPORT Font GetNewFontClientID(void);
-
-extern _X_EXPORT int init_fs_handlers(FontPathElementPtr fpe,
-                                      BlockHandlerProcPtr block_handler);
-
-extern _X_EXPORT int RegisterFPEFunctions(NameCheckFunc name_func,
-                                          InitFpeFunc init_func,
-                                          FreeFpeFunc free_func,
-                                          ResetFpeFunc reset_func,
-                                          OpenFontFunc open_func,
-                                          CloseFontFunc close_func,
-                                          ListFontsFunc list_func,
-                                          StartLfwiFunc start_lfwi_func,
-                                          NextLfwiFunc next_lfwi_func,
-                                          WakeupFpeFunc wakeup_func,
-                                          ClientDiedFunc client_died,
-                                          LoadGlyphsFunc load_glyphs,
-                                          StartLaFunc start_list_alias_func,
-                                          NextLaFunc next_list_alias_func,
-                                          SetPathFunc set_path_func);
-
-extern _X_EXPORT void remove_fs_handlers(FontPathElementPtr fpe,
-                                         BlockHandlerProcPtr blockHandler,
-                                         Bool all);
-
-extern _X_EXPORT int StoreFontClientFont(FontPtr pfont, Font id);
-
-#endif

--- xorg-server-1.14.5/mi/miglblt.c	2013-07-26 07:14:33.000000000 +0200
+++ xorg-server-1.14.5-archupstream/mi/miglblt.c	2024-03-29 15:37:34.175838069 +0100
@@ -53,6 +53,7 @@ SOFTWARE.
 #include	<X11/Xproto.h>
 #include	"misc.h"
 #include	<X11/fonts/fontstruct.h>
+#include        <X11/fonts/libxfont2.h>
 #include	"dixfontstr.h"
 #include	"gcstruct.h"
 #include	"windowstr.h"
@@ -185,13 +186,13 @@ miImageGlyphBlt(DrawablePtr pDrawable, G
                 pointer pglyphBase      /* start of array of glyphs */
     )
 {
-    ExtentInfoRec info;         /* used by QueryGlyphExtents() */
+    ExtentInfoRec info;         /* used by xfont2_query_glyph_extents() */
     ChangeGCVal gcvals[3];
     int oldAlu, oldFS;
     unsigned long oldFG;
     xRectangle backrect;
 
-    QueryGlyphExtents(pGC->font, ppci, (unsigned long) nglyph, &info);
+    xfont2_query_glyph_extents(pGC->font, ppci, (unsigned long) nglyph, &info);
 
     if (info.overallWidth >= 0) {
         backrect.x = x;
[rr@retroroot src]$ diff -urpN xorg-server-1.14.5/miext/damage/damage.c xorg-server-1.14.5-archupstream/miext/damage/damage.c
--- xorg-server-1.14.5/miext/damage/damage.c	2013-11-06 04:06:28.000000000 +0100
+++ xorg-server-1.14.5-archupstream/miext/damage/damage.c	2024-03-29 15:59:59.191790699 +0100
@@ -32,6 +32,7 @@
 #include    <X11/fonts/font.h>
 #include    "dixfontstr.h"
 #include    <X11/fonts/fontstruct.h>
+#include    <X11/fonts/libxfont2.h>
 #include    "mi.h"
 #include    "regionstr.h"
 #include    "globals.h"
@@ -1305,7 +1306,7 @@ damageDamageChars(DrawablePtr pDrawable,
     ExtentInfoRec extents;
     BoxRec box;
 
-    QueryGlyphExtents(font, charinfo, n, &extents);
+    xfont2_query_glyph_extents(font, charinfo, n, &extents);
     if (imageblt) {
         if (extents.overallWidth > extents.overallRight)
             extents.overallRight = extents.overallWidth;

--- xorg-server-1.14.5/os/utils.c	2013-07-26 07:14:33.000000000 +0200
+++ xorg-server-1.14.5-archupstream/os/utils.c	2024-03-29 16:00:54.998151132 +0100
@@ -79,6 +79,8 @@ __stdcall unsigned long GetTickCount(voi
 #define TRANS_SERVER
 #define TRANS_REOPEN
 #include <X11/Xtrans/Xtrans.h>
+#include <X11/fonts/fontstruct.h>
+#include <X11/fonts/libxfont2.h>
 #include "input.h"
 #include "dixfont.h"
 #include "osdep.h"
@@ -699,7 +701,7 @@ ProcessCommandLine(int argc, char *argv[
             DPMSDisabledSwitch = TRUE;
 #endif
         else if (strcmp(argv[i], "-deferglyphs") == 0) {
-            if (++i >= argc || !ParseGlyphCachingMode(argv[i]))
+            if (++i >= argc || !xfont2_parse_glyph_caching_mode(argv[i]))
                 UseMsg();
         }
         else if (strcmp(argv[i], "-f") == 0) {

--- xorg-server-1.14.5/include/os.h	2013-07-26 07:14:33.000000000 +0200
+++ xorg-server-1.14.5-archupstream/include/os.h	2024-03-29 15:51:27.681264253 +0100
@@ -148,6 +148,19 @@ extern _X_EXPORT void AddEnabledDevice(i
 
 extern _X_EXPORT void RemoveEnabledDevice(int /*fd */ );
 
+typedef void (*NotifyFdProcPtr)(int fd, int ready, void *data);
+
+#define X_NOTIFY_NONE   0
+#define X_NOTIFY_READ   1
+#define X_NOTIFY_WRITE  2
+
+extern _X_EXPORT Bool SetNotifyFd(int fd, NotifyFdProcPtr notify_fd, int mask, void *data);
+
+static inline void RemoveNotifyFd(int fd)
+{
+    (void) SetNotifyFd(fd, NULL, X_NOTIFY_NONE, NULL);
+}
+
 extern _X_EXPORT int OnlyListenToOneClient(ClientPtr /*client */ );
 
 extern _X_EXPORT void ListenToAllClients(void);
[rr@retroroot src]$ diff -urpN xorg-server-1.14.5/os/WaitFor.c xorg-server-1.14.5-archupstream/os/WaitFor.c 
--- xorg-server-1.14.5/os/WaitFor.c	2013-10-23 02:48:30.000000000 +0200
+++ xorg-server-1.14.5-archupstream/os/WaitFor.c	2024-03-29 15:52:51.420804737 +0100
@@ -299,6 +299,10 @@ WaitForSomething(int *pClientsReady)
             if (XFD_ANYSET(&tmp_set))
                 QueueWorkProc(EstablishNewConnections, NULL,
                               (pointer) &LastSelectMask);
+                              
+            XFD_ANDSET(&tmp_set, &LastSelectMask, &NotifyReadFds);
+            if (XFD_ANYSET(&tmp_set))
+              HandleNotifyFds();
 
             if (XFD_ANYSET(&devicesReadable) || XFD_ANYSET(&clientsReadable))
                 break;
--- xorg-server-1.14.5/os/connection.c	2013-07-26 07:14:33.000000000 +0200
+++ xorg-server-1.14.5-archupstream/os/connection.c	2024-03-29 15:55:20.119988758 +0100
@@ -129,6 +129,7 @@ static int lastfdesc;           /* maxim
 
 fd_set WellKnownConnections;    /* Listener mask */
 fd_set EnabledDevices;          /* mask for input devices that are on */
+fd_set NotifyReadFds;           /* mask for other file descriptors */
 fd_set AllSockets;              /* select on this */
 fd_set AllClients;              /* available clients */
 fd_set LastSelectMask;          /* mask returned from last select call */
@@ -1081,6 +1082,98 @@ RemoveEnabledDevice(int fd)
     RemoveGeneralSocket(fd);
 }
 
+struct notify_fd {
+    struct xorg_list list;
+    int fd;
+    int mask;
+    NotifyFdProcPtr notify;
+    void *data;
+};
+
+static struct xorg_list notify_fds;
+
+void
+InitNotifyFds(void)
+{
+    struct notify_fd *s, *next;
+    static int been_here;
+
+    if (been_here)
+        xorg_list_for_each_entry_safe(s, next, &notify_fds, list)
+            RemoveNotifyFd(s->fd);
+
+    xorg_list_init(&notify_fds);
+    been_here = 1;
+}
+
+/*****************
+ * SetNotifyFd
+ *    Registers a callback to be invoked when the specified
+ *    file descriptor becomes readable.
+ *****************/
+
+Bool
+SetNotifyFd(int fd, NotifyFdProcPtr notify, int mask, void *data)
+{
+    struct notify_fd *n;
+    int changes;
+
+    xorg_list_for_each_entry(n, &notify_fds, list)
+        if (n->fd == fd)
+            break;
+
+    if (&n->list == &notify_fds) {
+        if (mask == 0)
+            return TRUE;
+
+        n = calloc(1, sizeof (struct notify_fd));
+        if (!n)
+            return FALSE;
+        n->fd = fd;
+        xorg_list_add(&n->list, &notify_fds);
+    }
+
+    changes = n->mask ^ mask;
+
+    if (changes & X_NOTIFY_READ) {
+        if (mask & X_NOTIFY_READ) {
+            FD_SET(fd, &NotifyReadFds);
+            AddGeneralSocket(fd);
+        } else {
+            RemoveGeneralSocket(fd);
+            FD_CLR(fd, &NotifyReadFds);
+        }
+    }
+    if (mask == 0) {
+        xorg_list_del(&n->list);
+        free(n);
+    } else {
+        n->mask = mask;
+        n->data = data;
+        n->notify = notify;
+    }
+
+    return TRUE;
+}
+
+/*****************
+ * HandlNotifyFds
+ *    A WorkProc to be called when any of the registered
+ *    file descriptors are readable.
+ *****************/
+
+void
+HandleNotifyFds(void)
+{
+    struct notify_fd *s, *next;
+
+    xorg_list_for_each_entry_safe(s, next, &notify_fds, list) {
+        if (FD_ISSET(s->fd, &LastSelectMask)) {
+            s->notify(s->fd, X_NOTIFY_READ, s->data);
+        }
+    }
+}
+
 /*****************
  * OnlyListenToOneClient:
  *    Only accept requests from  one client.  Continue to handle new


--- xorg-server-1.14.5/os/osdep.h	2013-07-26 07:14:33.000000000 +0200
+++ xorg-server-1.14.5-archupstream/os/osdep.h	2024-03-29 15:56:14.326357970 +0100
@@ -159,6 +159,10 @@ extern int FlushClient(ClientPtr /*who *
 extern void FreeOsBuffers(OsCommPtr     /*oc */
     );
 
+extern void InitNotifyFds(void);
+
+extern void HandleNotifyFds(void);
+
 #include "dix.h"
 
 extern fd_set AllSockets;
@@ -166,6 +170,7 @@ extern fd_set AllClients;
 extern fd_set LastSelectMask;
 extern fd_set WellKnownConnections;
 extern fd_set EnabledDevices;
+extern fd_set NotifyReadFds;
 extern fd_set ClientsWithInput;
 extern fd_set ClientsWriteBlocked;
 extern fd_set OutputPending;

--- xorg-server-1.14.5/os/osinit.c	2013-07-26 07:14:33.000000000 +0200
+++ xorg-server-1.14.5-archupstream/os/osinit.c	2024-03-29 15:57:23.442645365 +0100
@@ -293,6 +293,7 @@ OsInit(void)
         LockServer();
         been_here = TRUE;
     }
+    InitNotifyFds();
     TimerInit();
     OsVendorInit();
     OsResetSignals();

--- xorg-server-1.14.5/render/picture.c	2024-03-29 17:16:39.100369270 +0100
+++ xorg-server-1.14.5-archupstream/render/picture.c	2024-03-29 17:16:38.943703463 +0100
@@ -876,7 +876,7 @@ CreateSolidPicture(Picture pid, xRenderC
     }
 
     pPicture->id = pid;
-    pPicture->pSourcePict = (SourcePictPtr) malloc(sizeof(PictSolidFill));
+    pPicture->pSourcePict = (SourcePictPtr) malloc(sizeof(SourcePict));
     if (!pPicture->pSourcePict) {
         *error = BadAlloc;
         free(pPicture);
@@ -906,7 +906,7 @@ CreateLinearGradientPicture(Picture pid,
     }
 
     pPicture->id = pid;
-    pPicture->pSourcePict = (SourcePictPtr) malloc(sizeof(PictLinearGradient));
+    pPicture->pSourcePict = (SourcePictPtr) malloc(sizeof(SourcePict));
     if (!pPicture->pSourcePict) {
         *error = BadAlloc;
         free(pPicture);
@@ -946,7 +946,7 @@ CreateRadialGradientPicture(Picture pid,
     }
 
     pPicture->id = pid;
-    pPicture->pSourcePict = (SourcePictPtr) malloc(sizeof(PictRadialGradient));
+    pPicture->pSourcePict = (SourcePictPtr) malloc(sizeof(SourcePict));
     if (!pPicture->pSourcePict) {
         *error = BadAlloc;
         free(pPicture);
@@ -989,7 +989,7 @@ CreateConicalGradientPicture(Picture pid
     }
 
     pPicture->id = pid;
-    pPicture->pSourcePict = (SourcePictPtr) malloc(sizeof(PictConicalGradient));
+    pPicture->pSourcePict = (SourcePictPtr) malloc(sizeof(SourcePict));
     if (!pPicture->pSourcePict) {
         *error = BadAlloc;
         free(pPicture);

--- xorg-server-1.14.5/hw/xfree86/common/compiler.h	2024-03-29 17:16:39.117035846 +0100
+++ xorg-server-1.14.5-archupstream/hw/xfree86/common/compiler.h	2024-03-29 17:16:38.997036504 +0100
@@ -98,6 +98,62 @@
 #if !defined(__GNUC__) && !defined(__FUNCTION__)
 #define __FUNCTION__ __func__   /* C99 */
 #endif
+
+#define NO_INLINE
+
+#include <string.h>             /* needed for memmove */
+
+static __inline__ uint64_t
+ldq_u(uint64_t * p)
+{
+    uint64_t ret;
+
+    memmove(&ret, p, sizeof(*p));
+    return ret;
+}
+
+static __inline__ uint32_t
+ldl_u(uint32_t * p)
+{
+    uint32_t ret;
+
+    memmove(&ret, p, sizeof(*p));
+    return ret;
+}
+
+static __inline__ uint16_t
+ldw_u(uint16_t * p)
+{
+    uint16_t ret;
+
+    memmove(&ret, p, sizeof(*p));
+    return ret;
+}
+
+static __inline__ void
+stq_u(uint64_t val, uint64_t * p)
+{
+    uint64_t tmp = val;
+
+    memmove(p, &tmp, sizeof(*p));
+}
+
+static __inline__ void
+stl_u(uint32_t val, uint32_t * p)
+{
+    uint32_t tmp = val;
+
+    memmove(p, &tmp, sizeof(*p));
+}
+
+static __inline__ void
+stw_u(uint16_t val, uint16_t * p)
+{
+    uint16_t tmp = val;
+
+    memmove(p, &tmp, sizeof(*p));
+}
+
 #if defined(NO_INLINE) || defined(DO_PROTOTYPES)
 #if !defined(__arm__)
 #if !defined(__sparc__) && !defined(__sparc) && !defined(__arm32__) && !defined(__nds32__) \
@@ -1001,7 +1057,7 @@ inl(unsigned short port)
 /* note that the appropriate setup via "ioperm" needs to be done */
 /*  *before* any inx/outx is done. */
 
-#include <sys/io.h>
+//#include <sys/io.h>
 
 static __inline__ void
 xf_outb(unsigned short port, unsigned char val)

