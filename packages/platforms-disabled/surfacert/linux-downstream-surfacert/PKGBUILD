# Maintainer: cpasjuste <cpasjuste@gmail.com>

pkgbase=linux-downstream-surfacert
pkgname=('linux-downstream-surfacert' 'linux-downstream-headers-surfacert')
pkgver=3.4.113
pkgrel=8
pkgdesc="RetroRoot surfacert kernel"
arch=('armv7h')
license=('GPL')
commit="6d33401a6d36e954593b6bc07c29f1eedeaf240f"
url="https://github.com/Open-Surface-RT/android_kernel_nvidia_tegra3/archive/${commit}.tar.gz"

# every retroroot pkg must be a member of "retroroot" AND "game", "emulator", "app" or "system" group
groups=('retroroot' 'system' 'surfacert')

depends=(
  'coreutils'
  # downstream kernel (3.4.x) with tegra xorg hw acceleration doesn't work with latest systemd, use older version
  'systemd=230-7' 'systemd-sysvcompat=230-7' 'libsystemd=230-7' 'systemd-libs-surfacert'
  # downstream kernel (3.4.x) needs xorg-server ABI 14
  'xorg-server-surfacert' 'xf86-video-tegra-surfacert' 'xf86-input-evdev-surfacert'
  # downstream kernel (3.4.x) needs wpa_supplicant (iwd not working)
  'wpa_supplicant' 'dhclient'
  # don't remember why but it's needed...
  'mkinitcpio=37.3-1' 'cryptsetup=2.7.0-1'
)
options=(!debug !strip)

source=(
  "$url"
  "config-surfacert"
  "sd8797_uapsta.bin"
  "001-overlayfs.patch"
  "002-sd8xxx.patch"
  "003-fix-gcc12-noreturn.patch"
  "004-fix-gcc12-asm.patch"
  "005-fix-gcc12-return_address.patch"
  "006-revert-stock-wm8962-codec.patch"
)
sha512sums=(
  'SKIP' 'SKIP' 'SKIP' 'SKIP' 'SKIP' 'SKIP' 'SKIP' 'SKIP' 'SKIP'
)

prepare() {
  _builddir="$srcdir/android_kernel_nvidia_tegra3-${commit}"
  cd "$_builddir"
  
  # overlayfs patch
  #echo "overlayfs: patching..."
  #patch -Np1 < "../001-overlayfs.patch"
  
  # sd8xxx patch
  echo "sd8xxx: patching..."
  patch -Np1 < "../002-sd8xxx.patch"
  
	# gcc12 noreturn patch
  echo "gcc12: patching... (noreturn)"
  patch -Np1 < "../003-fix-gcc12-noreturn.patch"

	# gcc12 patch
  echo "gcc12: patching... (asm)"
  patch -Np1 < "../004-fix-gcc12-asm.patch"
  
  # gcc12 return_address patch
  echo "gcc12: patching (return_address)..."
  patch -Np1 < "../005-fix-gcc12-return_address.patch"
  
  # fix randomly not working audio
  echo "audio: patching wm8962 codec..."
  patch -Np1 < "../006-revert-stock-wm8962-codec.patch"

  # gcc12 "fix"
  cp include/linux/compiler-gcc5.h include/linux/compiler-gcc12.h
  
  # gcc12 "tegra crap" fix...
  find ./drivers -type f -exec sed -i 's/EXTRA_CFLAGS +=/EXTRA_CFLAGS += -fno-pie /g' {} +
  find ./drivers -type f -exec sed -i 's/= -Werror/= -Wno-error/g' {} +
  find ./sound -type f -exec sed -i 's/= -Werror/= -Wno-error/g' {} +
  
  # copy firmware
  cp "$srcdir/sd8797_uapsta.bin" "$srcdir/android_kernel_nvidia_tegra3-${commit}/firmware/"
  
  # restore our custom config
  cp "$srcdir/config-surfacert" .config
  
  # setup retroroot cross compiler toolchain
  source ${RETROROOT_HOME}/bin/rr-env
  
  make ARCH="arm" oldconfig
  #make -s kernelrelease > version
  echo "${pkgver}" > version
}

build() {
  cd "$srcdir"/android_kernel_nvidia_tegra3-${commit}
  
  # setup retroroot cross compiler toolchain
  source ${RETROROOT_HOME}/bin/rr-env
  
  # gcc12 "fix"
  unset CFLAGS CPPFLAGS CXXFLAGS LDFLAGS
  export EXTRA_CFLAGS="-Wno-error -fno-pie" \
    CFLAGS_KERNEL="-Wno-error -fno-pie" \
    CFLAGS_MODULE="-Wno-error -fno-pie"
  
  # build
  make ARCH="arm" CROSS_COMPILE=${RETROROOT_CROSS_PREFIX} \
    KBUILD_BUILD_VERSION="$((pkgrel + 0))-retroroot"
}

package_linux-downstream-surfacert() {
  provides=('linux')
  
  cd "$srcdir"/android_kernel_nvidia_tegra3-${commit}
  
  # install kernel image and dtb
  install -d "$pkgdir"/boot
  cp arch/arm/boot/zImage "$pkgdir"/boot/zImage
  
  # install kernel modules
  make ARCH="arm" INSTALL_MOD_PATH="$pkgdir"/usr modules_install
  # remove build and source links
  rm -rf "$pkgdir"/usr/lib/modules/${pkgver}/{source,build}
  
  # TODO: install kernel headers
  #make INSTALL_HDR_PATH="$pkgdir"/usr header_install
  
  # copy surfacert rootfs overlays
  cp -r "$startdir"/overlay/. "${pkgdir}"
}

package_linux-downstream-headers-surfacert() {
  pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel (surfacert)"
  depends=(pahole)
  provides=('linux-headers')

  _srcname="$srcdir"/android_kernel_nvidia_tegra3-${commit}
  cd $_srcname
  local builddir="$pkgdir/usr/lib/modules/${pkgver}/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    version
    #localversion.* version vmlinux tools/bpf/bpftool/vmlinux.h
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/arm" -m644 arch/arm/Makefile
  cp -t "$builddir" -a scripts

  # required when STACK_VALIDATION is enabled
  #install -Dt "$builddir/tools/objtool" tools/objtool/objtool

  # required when DEBUG_INFO_BTF_MODULES is enabled
  #install -Dt "$builddir/tools/bpf/resolve_btfids" tools/bpf/resolve_btfids/resolve_btfids

  echo "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/arm" -a arch/arm/include
  install -Dt "$builddir/arch/arm/kernel" -m644 arch/arm/kernel/asm-offsets.s

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  #install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  #install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  #install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  #install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  #install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */arm/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  #echo "Removing documentation..."
  #rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  #echo "Stripping build tools..."
  #local file
  #while read -rd '' file; do
  #  case "$(file -Sib "$file")" in
  #    application/x-sharedlib\;*)      # Libraries (.so)
  #      ${STRIP} -v $STRIP_SHARED "$file" ;;
  #    application/x-archive\;*)        # Libraries (.a)
  #      ${STRIP} -v $STRIP_STATIC "$file" ;;
  #    application/x-executable\;*)     # Binaries
  #      ${STRIP} -v $STRIP_BINARIES "$file" ;;
  #    application/x-pie-executable\;*) # Relocatable binaries
  #      ${STRIP} -v $STRIP_SHARED "$file" ;;
  #  esac
  #done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  #echo "Stripping vmlinux..."
  #strip -v $STRIP_STATIC "$builddir/vmlinux"

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/linux"
}

