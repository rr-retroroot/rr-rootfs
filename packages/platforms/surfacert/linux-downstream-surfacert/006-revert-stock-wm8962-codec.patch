--- a/sound/soc/codecs/wm8962.c	2024-04-12 13:59:51.718192984 +0200
+++ b/sound/soc/codecs/wm8962.c	2024-04-12 13:58:59.861541236 +0200
@@ -116,6 +116,7 @@ static struct reg_default wm8962_reg[] =
 	{ 1, 0x049F },   /* R1     - Right Input volume */
 	{ 2, 0x0000 },   /* R2     - HPOUTL volume */
 	{ 3, 0x0000 },   /* R3     - HPOUTR volume */
+
 	{ 5, 0x0018 },   /* R5     - ADC & DAC Control 1 */
 	{ 6, 0x2008 },   /* R6     - ADC & DAC Control 2 */
 	{ 7, 0x000A },   /* R7     - Audio Interface 0 */
@@ -152,7 +153,6 @@ static struct reg_default wm8962_reg[] =
 	{ 40, 0x0000 },   /* R40    - SPKOUTL volume */
 	{ 41, 0x0000 },   /* R41    - SPKOUTR volume */
 
-	{ 49, 0x0010 },   /* R49    - Class D Control 1 */
 	{ 51, 0x0003 },   /* R51    - Class D Control 2 */
 
 	{ 56, 0x0506 },   /* R56    - Clocking 4 */
@@ -362,8 +362,8 @@ static struct reg_default wm8962_reg[] =
 	{ 16924, 0x0059 },   /* R16924 - HDBASS_PG_1 */
 	{ 16925, 0x999A },   /* R16925 - HDBASS_PG_0 */
 
-	{ 17408, 0x0083 },   /* R17408 - HPF_C_1 */
-	{ 17409, 0x98AD },   /* R17409 - HPF_C_0 */
+	{ 17048, 0x0083 },   /* R17408 - HPF_C_1 */
+	{ 17049, 0x98AD },   /* R17409 - HPF_C_0 */
 
 	{ 17920, 0x007F },   /* R17920 - ADCL_RETUNE_C1_1 */
 	{ 17921, 0xFFFF },   /* R17921 - ADCL_RETUNE_C1_0 */
@@ -794,6 +794,7 @@ static bool wm8962_volatile_register(str
 	case WM8962_ALC2:
 	case WM8962_THERMAL_SHUTDOWN_STATUS:
 	case WM8962_ADDITIONAL_CONTROL_4:
+	case WM8962_CLASS_D_CONTROL_1:
 	case WM8962_DC_SERVO_6:
 	case WM8962_INTERRUPT_STATUS_1:
 	case WM8962_INTERRUPT_STATUS_2:
@@ -1598,6 +1599,7 @@ static int wm8962_put_hp_sw(struct snd_k
 			    struct snd_ctl_elem_value *ucontrol)
 {
 	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
+	u16 *reg_cache = codec->reg_cache;
 	int ret;
 
 	/* Apply the update (if any) */
@@ -1606,19 +1608,16 @@ static int wm8962_put_hp_sw(struct snd_k
 		return 0;
 
 	/* If the left PGA is enabled hit that VU bit... */
-	ret = snd_soc_read(codec, WM8962_PWR_MGMT_2);
-	if (ret & WM8962_HPOUTL_PGA_ENA) {
-		snd_soc_write(codec, WM8962_HPOUTL_VOLUME,
-			      snd_soc_read(codec, WM8962_HPOUTL_VOLUME));
-		return 1;
-	}
+	if (snd_soc_read(codec, WM8962_PWR_MGMT_2) & WM8962_HPOUTL_PGA_ENA)
+		return snd_soc_write(codec, WM8962_HPOUTL_VOLUME,
+				     reg_cache[WM8962_HPOUTL_VOLUME]);
 
 	/* ...otherwise the right.  The VU is stereo. */
-	if (ret & WM8962_HPOUTR_PGA_ENA)
-		snd_soc_write(codec, WM8962_HPOUTR_VOLUME,
-			      snd_soc_read(codec, WM8962_HPOUTR_VOLUME));
+	if (snd_soc_read(codec, WM8962_PWR_MGMT_2) & WM8962_HPOUTR_PGA_ENA)
+		return snd_soc_write(codec, WM8962_HPOUTR_VOLUME,
+				     reg_cache[WM8962_HPOUTR_VOLUME]);
 
-	return 1;
+	return 0;
 }
 
 /* The VU bits for the speakers are in a different register to the mute
@@ -2372,11 +2371,11 @@ static int wm8962_add_widgets(struct snd
 
 /* -1 for reserved values */
 static const int bclk_divs[] = {
-	1, -1, 2, 3, 4, -1, 6, 8, -1, 11, 16, 24, -1, 32, 32, 32
+	1, -1, 2, 3, 4, -1, 6, 8, -1, 12, 16, 24, -1, 32, 32, 32
 };
 
 static const int sysclk_rates[] = {
-	64, 128, 192, 256, 382, 512, 768, 1024, 1408, 1536, 3072, 6144
+	64, 128, 192, 256, 384, 512, 768, 1024, 1408, 1536, 3072, 6144
 };
 
 static void wm8962_configure_bclk(struct snd_soc_codec *codec)
@@ -2388,12 +2387,12 @@ static void wm8962_configure_bclk(struct
 	int aif2 = 0;
 
 	if (!wm8962->sysclk_rate) {
-		dev_err(codec->dev, "No SYSCLK configured\n");
+		dev_dbg(codec->dev, "No SYSCLK configured\n");
 		return;
 	}
 
 	if (!wm8962->bclk || !wm8962->lrclk) {
-		dev_err(codec->dev, "No audio clocks configured\n");
+		dev_dbg(codec->dev, "No audio clocks configured\n");
 		return;
 	}
 
@@ -2410,7 +2409,7 @@ static void wm8962_configure_bclk(struct
 		return;
 	}
 
-	dev_err(codec->dev, "Selected sysclk ratio %d\n", sysclk_rates[i]);
+	dev_dbg(codec->dev, "Selected sysclk ratio %d\n", sysclk_rates[i]);
 
 	snd_soc_update_bits(codec, WM8962_CLOCKING_4,
 			    WM8962_SYSCLK_RATE_MASK, clocking4);
@@ -2437,7 +2436,7 @@ static void wm8962_configure_bclk(struct
 		dspclk = wm8962->sysclk;
 	}
 
-	dev_err(codec->dev, "DSPCLK is %dHz, BCLK %d\n", dspclk, wm8962->bclk);
+	dev_dbg(codec->dev, "DSPCLK is %dHz, BCLK %d\n", dspclk, wm8962->bclk);
 
 	/* We're expecting an exact match */
 	for (i = 0; i < ARRAY_SIZE(bclk_divs); i++) {
@@ -2445,7 +2444,7 @@ static void wm8962_configure_bclk(struct
 			continue;
 
 		if (dspclk / bclk_divs[i] == wm8962->bclk) {
-			dev_err(codec->dev, "Selected BCLK_DIV %d for %dHz\n",
+			dev_dbg(codec->dev, "Selected BCLK_DIV %d for %dHz\n",
 				bclk_divs[i], wm8962->bclk);
 			clocking2 |= i;
 			break;
@@ -2458,7 +2457,7 @@ static void wm8962_configure_bclk(struct
 	}
 
 	aif2 |= wm8962->bclk / wm8962->lrclk;
-	dev_err(codec->dev, "Selected LRCLK divisor %d for %dHz\n",
+	dev_dbg(codec->dev, "Selected LRCLK divisor %d for %dHz\n",
 		wm8962->bclk / wm8962->lrclk, wm8962->lrclk);
 
 	snd_soc_update_bits(codec, WM8962_CLOCKING2,
@@ -2489,9 +2488,6 @@ static int wm8962_set_bias_level(struct
 		/* VMID 2*250k */
 		snd_soc_update_bits(codec, WM8962_PWR_MGMT_1,
 				    WM8962_VMID_SEL_MASK, 0x100);
-
-		if (codec->dapm.bias_level == SND_SOC_BIAS_OFF)
-			msleep(100);
 		break;
 
 	case SND_SOC_BIAS_OFF:
@@ -2523,7 +2519,8 @@ static int wm8962_hw_params(struct snd_p
 			    struct snd_pcm_hw_params *params,
 			    struct snd_soc_dai *dai)
 {
-	struct snd_soc_codec *codec = dai->codec;
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct snd_soc_codec *codec = rtd->codec;
 	struct wm8962_priv *wm8962 = snd_soc_codec_get_drvdata(codec);
 	int i;
 	int aif0 = 0;
@@ -2587,7 +2584,7 @@ static int wm8962_set_dai_sysclk(struct
 	switch (clk_id) {
 	case WM8962_SYSCLK_MCLK:
 		wm8962->sysclk = WM8962_SYSCLK_MCLK;
-		src = 0;//check this
+		src = 0;
 		break;
 	case WM8962_SYSCLK_FLL:
 		wm8962->sysclk = WM8962_SYSCLK_FLL;
@@ -2886,22 +2883,13 @@ static int wm8962_set_fll(struct snd_soc
 static int wm8962_mute(struct snd_soc_dai *dai, int mute)
 {
 	struct snd_soc_codec *codec = dai->codec;
-	int val, ret;
+	int val;
 
 	if (mute)
-		val = WM8962_DAC_MUTE | WM8962_DAC_MUTE_ALT;
+		val = WM8962_DAC_MUTE;
 	else
 		val = 0;
 
-	/**
-	 * The DAC mute bit is mirrored in two registers, update both to keep
-	 * the register cache consistent.
-	 */
-	ret = snd_soc_update_bits(codec, WM8962_CLASS_D_CONTROL_1,
-				  WM8962_DAC_MUTE_ALT, val);
-	if (ret < 0)
-		return ret;
-
 	return snd_soc_update_bits(codec, WM8962_ADC_DAC_CONTROL_1,
 				   WM8962_DAC_MUTE, val);
 }
@@ -3372,6 +3360,7 @@ static int wm8962_probe(struct snd_soc_c
 	int ret;
 	struct wm8962_priv *wm8962 = snd_soc_codec_get_drvdata(codec);
 	struct wm8962_pdata *pdata = dev_get_platdata(codec->dev);
+	u16 *reg_cache = codec->reg_cache;
 	int i, trigger, irq_pol;
 	bool dmicclk, dmicdat;
 
@@ -3429,9 +3418,8 @@ static int wm8962_probe(struct snd_soc_c
 
 		/* Put the speakers into mono mode? */
 		if (pdata->spk_mono)
-			snd_soc_update_bits(codec, WM8962_CLASS_D_CONTROL_2,
-				WM8962_SPK_MONO_MASK, WM8962_SPK_MONO);
-
+			reg_cache[WM8962_CLASS_D_CONTROL_2]
+				|= WM8962_SPK_MONO;
 
 		/* Micbias setup, detection enable and detection
 		 * threasholds. */
@@ -3682,8 +3670,6 @@ static __devinit int wm8962_i2c_probe(st
 	if (ret < 0)
 		goto err_regmap;
 
-	//regcache_cache_only(wm8962->regmap, true);
-
 	/* The drivers should power up as needed */
 	regulator_bulk_disable(ARRAY_SIZE(wm8962->supplies), wm8962->supplies);
 
@@ -3724,9 +3710,6 @@ static int wm8962_runtime_resume(struct
 	}
 
 	regcache_cache_only(wm8962->regmap, false);
-
-	wm8962_reset(wm8962);
-
 	regcache_sync(wm8962->regmap);
 
 	regmap_update_bits(wm8962->regmap, WM8962_ANTI_POP,

